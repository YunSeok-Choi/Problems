package DFS_BFS;

import java.util.*;

public class 숨바꼭질 {
	public static Queue<Integer> q = new LinkedList<>();
	public static int[] visited = new int[100001];
	public static int n, k, sum = 0;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		k = sc.nextInt();
		q.offer(n);
		visited[n] = 1;
		System.out.println(bfs());

	}

	public static int bfs() {

		while (!q.isEmpty()) {
			int x = q.poll();

			if (x == k)
				return visited[x] - 1;

			if (x - 1 >= 0 && visited[x - 1] == 0) {
				visited[x - 1] = visited[x] + 1;
				q.offer(x - 1);
			}
			if (x + 1 <= 100000 && visited[x + 1] == 0) {
				visited[x + 1] = visited[x] + 1;
				q.offer(x + 1);
			}
			if (x * 2 <= 100000 && visited[x * 2] == 0) {
				visited[x * 2] = visited[x] + 1;
				q.offer(x * 2);
			}

		}
		return -1;
	}

}
