package dfs;

import java.util.*;

public class 영역구하기 {
	public static int map[][];
	public static boolean visit[][];
	public static int[] dy = { -1, 1, 0, 0 };
	public static int[] dx = { 0, 0, -1, 1 };
	public static int[] max = new int[101];
	public static int M, N, K, sum = 0, num = 0;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		K = sc.nextInt();

		map = new int[M][N];
		visit = new boolean[M][N];

		for (int i = 0; i < K; i++) {
			int x1 = sc.nextInt();
			int y1 = sc.nextInt();
			int x2 = sc.nextInt();
			int y2 = sc.nextInt();

			map[x1][y1] = 1;
			map[--x2][--y2] = 1;

			for (int q = x1; q <= x2; q++) {
				for (int p = y1; p <= y2; p++) {
					map[q][p] = 1;
				}
			}
		}

		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] == 0 && !visit[i][j]) {
					dfs(i, j);
					sum++;
					num++;
				}
			}
		}
		Arrays.sort(max);

		System.out.println(num);
		for (int i : max) {
			if (i != 0)
				System.out.print(i + " ");
		}
	}

	public static void dfs(int x, int y) {
		visit[x][y] = true;
		max[sum]++;
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx >= 0 && ny >= 0 && nx < M && ny < N) {
				if (map[nx][ny] == 0 && !visit[nx][ny]) {
					dfs(nx, ny);
				}
			}
		}
	}

}
