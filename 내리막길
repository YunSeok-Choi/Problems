package dfs;

import java.io.*;
import java.util.*;

public class 내리막길 {
	public static int[][] map;
	public static int[][] dp;
	public static int[] dx = { 0, 0, -1, 1 };
	public static int[] dy = { -1, 1, 0, 0 };
	public static int m, n, sum = 0;

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		String s = br.readLine();
		StringTokenizer st = new StringTokenizer(s);

		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());

		map = new int[m][n];
		dp = new int[m][n];
		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < n; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				dp[i][j] = -1;
			}
		}

		bw.write(dfs(0, 0) + "\n");

		bw.flush();
		bw.close();
	}

	public static int dfs(int x, int y) {
		if (x == m - 1 && y == n - 1)
			return 1;

		if (dp[x][y] != -1)
			return dp[x][y];
		else {
			dp[x][y] = 0;
			for (int i = 0; i < 4; i++) {

				int ny = y + dy[i];
				int nx = x + dx[i];

				if (ny >= 0 && nx >= 0 && ny < n && nx < m) {
					if (map[nx][ny] < map[x][y]) {
						dp[x][y] += dfs(nx, ny);
					}
				}
			}
		}
		return dp[x][y];

	}

}
