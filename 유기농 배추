package dfs;

import java.util.Scanner;

public class 유기농배추 {
	private static int t, n, m, k, sum = 0;
	private static int[][] map;
	private static boolean visit[][];
	private static int[] dy = { -1, 1, 0, 0 };
	private static int[] dx = { 0, 0, -1, 1 };

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		t = sc.nextInt();

		for (int i = 0; i < t; i++) {
			sum = 0;
			n = sc.nextInt();
			m = sc.nextInt();
			k = sc.nextInt();
			map = new int[n + 1][m + 1];
			visit = new boolean[n * m + 1][n * m + 1];

			for (int j = 0; j < k; j++) {
				int a = sc.nextInt();
				int b = sc.nextInt();
				map[a][b] = 1;
			}

			for (int q = 0; q < n; q++) {
				for (int p = 0; p < m; p++) {
					if (map[q][p] == 1 && !visit[q][p]) {
						dfs(q, p);
						sum++;
					}
				}
			}

			System.out.println(sum);
		}
	}

	public static void dfs(int x, int y) {
		visit[x][y] = true;

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
				if (map[nx][ny] == 1 && !visit[nx][ny]) {
					dfs(nx, ny);
				}
			}

		}
	}

}
