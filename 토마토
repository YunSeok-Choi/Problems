package DFS_BFS;

import java.util.*;

public class 토마토 {
	public static Queue<Node> q = new LinkedList<>();
	public static int[][] map;
	public static int[] dx = { 0, 0, -1, 1 };
	public static int[] dy = { 1, -1, 0, 0 };
	public static int n, m, result = 0;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		m = sc.nextInt();
		n = sc.nextInt();
		map = new int[n][m];

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				map[i][j] = sc.nextInt();
				if (map[i][j] == 1)
					q.offer(new Node(i, j));
			}
		}
		System.out.println(bfs());
	}

	public static int bfs() {

		while (!q.isEmpty()) {
			Node node = q.poll();

			int x = node.getX();
			int y = node.getY();

			for (int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];

				if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
					if (map[ny][nx] == 0) {
						q.offer(new Node(ny, nx));
						map[ny][nx] = map[y][x] + 1;
					}
				}
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (map[i][j] == 0)
					return -1;
				result = Math.max(result, map[i][j]);
			}
		}
		if (result == 1)
			return 0;
		else
			return result - 1;
	}

	static class Node {
		private int x, y;

		Node(int y, int x) {
			this.y = y;
			this.x = x;
		}

		int getX() {
			return x;
		}

		int getY() {
			return y;
		}
	}
}
