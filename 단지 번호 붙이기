package dfs;

import java.util.*;

public class 단지번호붙이기 {

	public static int[][] map;
	public static boolean[][] visited = new boolean[25][25];
	public static int[] dy = { -1, 1, 0, 0 };
	public static int[] dx = { 0, 0, 1, -1 };
	public static int apart[] = new int[25 * 25];
	public static int n, num = 0;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		map = new int[n][n];
		sc.nextLine();

		for (int i = 0; i < n; i++) {
			String arr = sc.next();
			for (int j = 0; j < n; j++) {
				map[i][j] = arr.charAt(j) - '0';
			}
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (map[i][j] == 1 && !visited[i][j]) {
					num++;
					dfs(i, j);
				}
			}
		}
		Arrays.sort(apart);
		System.out.println(num);
		for (int i = 0; i < apart.length; i++) {
			if (apart[i] == 0) {
			} else
				System.out.println(apart[i]);
		}
	}

	public static void dfs(int y, int x) {
		visited[y][x] = true;
		apart[num]++;

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
				if (map[ny][nx] == 1 && !visited[ny][nx]) {
					dfs(ny, nx);
				}
			}
		}
	}
}
