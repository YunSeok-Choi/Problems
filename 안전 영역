package dfs;

import java.util.*;

public class 안전영역 {
	public static int q, n, max = 0;
	public static int[] dy = { -1, 1, 0, 0 };
	public static int[] dx = { 0, 0, -1, 1 };
	public static int[][] map;
	public static boolean[][] visit;
	public static int[] sum;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);

		n = sc.nextInt();
		map = new int[n][n];

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				map[i][j] = sc.nextInt();
				if (map[i][j] > max)
					max = map[i][j];
			}
		}
		sum = new int[max];
		for (q = 0; q <= max; q++) {
			visit = new boolean[n][n];

			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (map[i][j] > q && !visit[i][j]) {
						dfs(i, j);
						sum[q]++;
					}
				}
			}
		}
		Arrays.sort(sum);
		System.out.println(sum[sum.length - 1]);

	}

	public static void dfs(int x, int y) {
		visit[x][y] = true;

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx >= 0 && ny >= 0 && nx < n && ny < n) {
				if (map[nx][ny] > q && !visit[nx][ny]) {
					dfs(nx, ny);
				}
			}

		}
	}

}
